head(taxa_names(t_tab))
head(taxa_names(a_tab))
setdiff(taxa_names(a_tab), taxa_names(t_tab))
a_tab = otu_table(as.matrix(asv_table), taxa_are_rows=T)
source('~/hyperphylo/physeq_filter_test.R')
ps
ps = phyloseq(a_tab, t_tab, samp)
source('~/hyperphylo/physeq_filter_test.R')
ps
source('~/hyperphylo/physeq_filter_test.R')
# if (!file.exists('test_phylo.RData'))
# {
asv_table = read.table('small_asv_table.tsv', header=T, sep='\t')
taxonomy_table = read.table('small_tax_table.tsv', header=T, sep='\t')
study_metadata = read.table('map_091917.tsv', header=T, sep='\t')
sample_names = study_metadata[,'SampleID']
a_tab = otu_table(as.matrix(asv_table), taxa_are_rows=T)
t_tab = tax_table(as.matrix(taxonomy_table))
samp = sample_data(as.matrix(study_metadata))
sample = sample_data(as.matrix(study_metadata))
head(taxa_names(t_tab))
head(taxa_names(a_tab))
setdiff(taxa_names(a_tab), taxa_names(t_tab))
print("no samp")
ps = phyloseq(a_tab, t_tab)
print("with samp")
ps = phyloseq(a_tab, t_tab, samp)
ps
ps@sam_data = sample_data(study_metadata)
ps
source('~/hyperphylo/physeq_filter_test.R')
print("no samp")
ps = phyloseq(a_tab, t_tab)
ps@sam_data = sample_data(study_metadata)
ps
print("with samp")
ps2 = phyloseq(a_tab, t_tab, samp)
samp = sample_data(as.matrix(study_metadata))
ps2 = phyloseq(a_tab, t_tab, samp)
source('~/.active-rstudio-document')
View(tax_table)
View(taxonomy_table)
View(tax_table)
View(asv_table)
matrix(A=c(1,2))
source('~/hyperphylo/constructed_example.R')
N_ASVs = 10
N_samples = 12
N_variables = 2
sample_names = paste0("Sample", 1:N_samples)
sample_names
asv_table = matrix(sample(1:100, 100, replace = TRUE), nrow = N_ASVs, ncol = N_samples)
N_ASVs = 12
N_samples = 10
N_variables = 2
sample_names = paste0("Sample", 1:N_samples)
sample_names
asv_table = matrix(sample(1:100, 100, replace = TRUE), nrow = N_ASVs, ncol = N_samples)
asv_table = matrix(sample(1:100, N_ASVs*N_samples, replace = TRUE), nrow = N_ASVs, ncol = N_samples)
rownames(asv_table) <- paste0("ASV", 1:nrow(asv_table))
colnames(asv_table) <- sample_names
asv_table
taxonomy_table = matrix(sample(letters, 70, replace = TRUE), nrow = N_ASVs, ncol = 7)
rownames(taxonomy_table) <- rownames(asv_table)
colnames(taxonomy_table) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxonomy_table = matrix(sample(letters, N_ASVs*7, replace = TRUE), nrow = N_ASVs, ncol = 7)
rownames(taxonomy_table) <- rownames(asv_table)
replace
rownames(taxonomy_table) <- rownames(asv_table)
colnames(taxonomy_table) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxonomy_table
study_metadata = data.frame(
SampleID=sample_names,
var1=sample(sample(letters, 70, replace = TRUE)),
var2=sample(1:100, 100, replace = TRUE)
)
study_metadata = data.frame(
SampleID=sample_names,
var1=sample(sample(letters, N_samples*N_variables, replace = TRUE)),
var2=sample(1:100, N_samples*N_variables, replace = TRUE)
)
study_metadata = as.matrix(study_metadata)
study_metadata = data.frame(
SampleID=sample_names,
var1=sample(sample(letters, N_samples*N_variables, replace = TRUE)),
var2=sample(1:100, N_samples*N_variables, replace = TRUE)
)
study_metadata
rownames(study_metadata) = rownames(asv_table)
study_metadata = as.matrix(study_metadata)
study_metadata
asv_table
rownames(study_metadata) = rownames(asv_table)
study_metadata = data.frame(
SampleID=sample_names,
var1=sample(sample(letters, N_samples, replace = TRUE)),
var2=sample(1:100, N_sampless, replace = TRUE)
)
rownames(study_metadata) = rownames(asv_table)
study_metadata = as.matrix(study_metadata)
study_metadata
study_metadata = data.frame(
SampleID=sample_names,
var1=sample(sample(letters, N_samples, replace = TRUE)),
var2=sample(1:100, N_sampless, replace = TRUE)
)
study_metadata = data.frame(
SampleID=sample_names,
var1=sample(sample(letters, N_samples, replace = TRUE)),
var2=sample(1:100, N_samples, replace = TRUE)
)
rownames(study_metadata) = rownames(asv_table)
rownames(study_metadata) = colnames(asv_table)
study_metadata = as.matrix(study_metadata)
study_metadata
asv_table
study_metadata = read.table('map_091917.tsv', header=T, sep='\t')
View(study_metadata)
rownames(study_metadata)
source('~/hyperphylo/constructed_example.R')
ps = phyloseq(
otu_table(asv_table, taxa_are_rows=T),
tax_table(taxonomy_table)
)
ps = phyloseq(
otu_table(asv_table, taxa_are_rows=T),
tax_table(taxonomy_table),
sample_data(study_metadata)
)
ps@sam_data = sample_data(study_metadata)
ps = phyloseq(
otu_table(asv_table, taxa_are_rows=T),
tax_table(taxonomy_table)
)
ps@sam_data = sample_data(study_metadata)
source('~/hyperphylo/constructed_example.R')
ps
ps2 = phyloseq(
otu_table(asv_table, taxa_are_rows=T),
tax_table(taxonomy_table),
sample_data(study_metadata)
)
source('~/hyperphylo/constructed_example.R')
library(phyloseq)
N_ASVs = 12
N_samples = 7
N_variables = 2
sample_names = paste0("Sample", 1:N_samples)
sample_names
asv_table = matrix(sample(1:100, N_ASVs*N_samples, replace = TRUE), nrow = N_ASVs, ncol = N_samples)
rownames(asv_table) <- paste0("ASV", 1:nrow(asv_table))
colnames(asv_table) <- sample_names
asv_table
taxonomy_table = matrix(sample(letters, N_ASVs*7, replace = TRUE), nrow = N_ASVs, ncol = 7)
rownames(taxonomy_table) <- rownames(asv_table)
colnames(taxonomy_table) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxonomy_table
study_metadata = data.frame(
SampleID=sample_names,
var1=sample(sample(letters, N_samples, replace = TRUE)),
var2=sample(1:100, N_samples, replace = TRUE)
)
study_metadata = as.matrix(study_metadata)
study_metadata
ps = phyloseq(
otu_table(asv_table, taxa_are_rows=T),
tax_table(taxonomy_table)
)
ps@sam_data = sample_data(study_metadata)
ps
ps@sam_data = sample_data(study_metadata)
ps
study_metadata = data.frame(
SampleID=sample_names,
var1=sample(sample(letters, N_samples, replace = TRUE)),
var2=sample(1:100, N_samples, replace = TRUE)
)
# study_metadata = as.matrix(study_metadata)
study_metadata
ps = phyloseq(
otu_table(asv_table, taxa_are_rows=T),
tax_table(taxonomy_table)
)
ps@sam_data = sample_data(study_metadata)
ps
ps2 = phyloseq(
otu_table(asv_table, taxa_are_rows=T),
tax_table(taxonomy_table),
sample_data(study_metadata)
)
ps2
library(phyloseq)
N_ASVs = 12
N_samples = 7
N_variables = 2
sample_names = paste0("Sample", 1:N_samples)
sample_names
asv_table = matrix(sample(1:100, N_ASVs*N_samples, replace = TRUE), nrow = N_ASVs, ncol = N_samples)
rownames(asv_table) <- paste0("ASV", 1:nrow(asv_table))
colnames(asv_table) <- sample_names
asv_table
taxonomy_table = matrix(sample(letters, N_ASVs*7, replace = TRUE), nrow = N_ASVs, ncol = 7)
rownames(taxonomy_table) <- rownames(asv_table)
colnames(taxonomy_table) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxonomy_table
study_metadata = data.frame(
SampleID=sample_names,
var1=sample(sample(letters, N_samples, replace = TRUE)),
var2=sample(1:100, N_samples, replace = TRUE)
)
# study_metadata = as.matrix(study_metadata)
study_metadata
ps = phyloseq(
otu_table(asv_table, taxa_are_rows=T),
tax_table(taxonomy_table)
)
ps@sam_data = sample_data(study_metadata)
ps
ps2 = phyloseq(
otu_table(asv_table, taxa_are_rows=T),
tax_table(taxonomy_table),
sample_data(study_metadata)
)
ps2
print(ps)
source('~/hyperphylo/physeq_filter_test.R')
list.files()
filter1 = PhyseqFilter(
phyloseq_object=ps
)
source('~/hyperphylo/physeq_filter_test.R')
ls()
source('~/hyperphylo/physeq_filter_test.R')
source('~/hyperphylo/constructed_example.R')
source('~/hyperphylo/physeq_filter_test.R')
View(filter1)
filter1.filter(variable_value_query = "var1<5")
hyloseq_object=ps
)
filter1 = PhyseqFilter$new(
phyloseq_object=ps
)
source('~/hyperphylo/physeq_filter_test.R')
psfilter1$filter(variable_value_query = "var1<10")
source('~/hyperphylo/physeq_filter_test.R')
View(psfilter1)
psfilter1
source('~/hyperphylo/physeq_filter_test.R')
psfilter1
source('~/hyperphylo/physeq_filter_test.R')
psfilter1
source('~/hyperphylo/PhyseqFilter.R')
.libPaths(new=c('/home/balter/conda/envs/dada2/lib/R/library', '/home/balter/R'))
library(phyloseq)
library(sqldf)
asv_table = read.table('239_asv_table.tsv', header=T, sep='\t')
setwd('../MiSeq239/results')
load('miseq_239_phyloseq-10-14-2018.RData')
setwd('../../hyperphylo')
write.table(ps@otu_table, file="239_asv_table.tsv", "\t")
asv_table = ps@otu_table
ncol(asv_table)
source('~/hyperphylo/physeq_filter_test.R')
print(ps)
source('~/hyperphylo/PhyseqFilter.R')
source('~/hyperphylo/physeq_filter_test.R')
dim(small_asv_table)
dim(small_taxa_table)
View(small_study_metadata)
dim(small_study_metadata)
source('~/hyperphylo/physeq_filter_test.R')
dim(small_asv_table)
dim(small_taxa_table)
dim(small_study_metadata)
ps = phyloseq(
otu_table(as.matrix(small_asv_table), taxa_are_rows=T),
tax_table(as.matrix(small_taxa_table))
)
ps@sam_data = sample_data(as.matrix(small_study_metadata))
ps = phyloseq(
otu_table(as.matrix(small_asv_table), taxa_are_rows=T),
tax_table(as.matrix(small_taxa_table))
)
ps@sam_data = sample_data(as.matrix(small_study_metadata))
ps@sam_data = sample_data(small_study_metadata)
.libPaths(new=c('/home/balter/conda/envs/dada2/lib/R/library', '/home/balter/R'))
library(phyloseq)
library(sqldf)
load('small_tables.RData')
age_rounded_numeric = sapply(small_study_metadata['Age_Rounded'], as.numeric)
small_study_metadata['Age_Rounded'] = as.factor(age_rounded_numeric)
CaseString = ifelse(small_study_metadata['Case']==0, "AMD", "Control")
small_study_metadata['CaseString'] = CaseString
sample_names = levels(small_study_metadata[,'SampleID'])
dim(small_asv_table)
dim(small_taxa_table)
dim(small_study_metadata)
ps = phyloseq(
otu_table(as.matrix(small_asv_table), taxa_are_rows=T),
tax_table(as.matrix(small_taxa_table))
)
ps@sam_data = sample_data(small_study_metadata)
ps
save(ps, file="test_phylo.RData")
source('~/hyperphylo/PhyseqFilter.R')
source('~/hyperphylo/physeq_filter_test.R')
ps
ps = phyloseq(
otu_table(as.matrix(small_asv_table), taxa_are_rows=T),
tax_table(as.matrix(small_taxa_table))
)
ps@sam_data = sample_data(small_study_metadata)
age_rounded_numeric = sapply(small_study_metadata['Age_Rounded'], as.numeric)
small_study_metadata['Age_Rounded'] = as.factor(age_rounded_numeric)
age_rounded_numeric
small_study_metadata
small_study_metadata$Age_Rounded
age_rounded_numeric
age_rounded_numeric = sapply(small_study_metadata$Age_Rounded, as.numeric)
age_rounded_numeric
source('~/hyperphylo/physeq_filter_test.R')
small_study_metadata['Age_Rounded'] = as.factor(age_rounded_numeric)
CaseString = ifelse(small_study_metadata$Case == 0, "AMD", "Control")
small_study_metadata['CaseString'] = CaseString
sample_names = levels(small_study_metadata[,'SampleID'])
dim(small_asv_table)
dim(small_taxa_table)
small_study_metadata$CaseString = CaseString
sample_names = levels(small_study_metadata[,'SampleID'])
sample_names = levels(small_study_metadata$SampleID)
source('~/hyperphylo/physeq_filter_test.R')
source('~/hyperphylo/PhyseqFilter.R')
small_study_metadata = small_study_metadata[sort(colnames(small_study_metadata))]
colnames(small_study_metadata)
sort(colnames(small_study_metadata))
source('~/hyperphylo/PhyseqFilter.R')
source('~/hyperphylo/physeq_filter_test.R')
source('~/hyperphylo/PhyseqFilter.R')
str(ps@sam_data)
str(ps@sam_data$CaseString)
load('small_tables.RData')
small_study_metadata$Case
CaseString = ifelse(small_study_metadata$Case == 0, "AMD", "Control")
CaseString
small_study_metadata$CaseString = CaseString
small_study_metadata$CaseString
sample_names = levels(small_study_metadata$SampleID)
sample_names
small_study_metadata$SampleName
load('small_tables.RData')
small_study_metadata$SampleID = rownames(small_asv_table)
rownames(small_asv_table)
small_study_metadata$SampleID = colnames(small_asv_table)
sample_names = levels(small_study_metadata$SampleID)
small_study_metadata = small_study_metadata[sort(colnames(small_study_metadata))]
dim(small_asv_table)
sample_names
levels(small_study_metadata$SampleID)
colnames(small_asv_table)
small_study_metadata$SampleID = colnames(small_asv_table)
asv_table = t(ps@otu_table)
taxa_table = ps@tax_table
study_metadata = ps@sam_data
dim(asv_table)
load('~/MiSeq239/results/miseq_239_phyloseq-10-14-2018.RData')
dim()
asv_table = t(ps@otu_table)
taxa_table = ps@tax_table
study_metadata = ps@sam_data
dim(asv_table)
study_metadata$SampleID = colnames(asv_table)
small_asv_table = asv_table[,someints]
(134,20)
source('~/hyperphylo/make_small_tables.R')
small_asv_table
library(phyloseq)
load('~/MiSeq239/results/miseq_239_phyloseq-10-14-2018.RData')
asv_table = t(data.frame(ps@otu_table))
library(phyloseq)
load('~/MiSeq239/results/miseq_239_phyloseq-10-14-2018.RData')
asv_table = t(data.frame(ps@otu_table))
dim(ps@otu_table)
dim(data.frame(ps@otu_table))
load('~/MiSeq239/results/miseq_239_phyloseq-10-14-2018.RData')
asv_table = t(as.data.frame(ps@otu_table))
as.matrix(ps@otu_table)
as.data.frame(ps@otu_table)
as.data.frame(as.matrix(ps@otu_table))
data.frame(as.matrix(ps@otu_table))
as.matrix(ps@otu_table)
load('~/MiSeq239/results/miseq_239_phyloseq-10-14-2018.RData')
asv_table = t(as.matrix(ps@otu_table))
taxa_table = as.matrix(ps@tax_table)
study_metadata = as.matrix(ps@sam_data)
study_metadata$SampleID = colnames(asv_table)
study_metadata = as.data.frame(ps@sam_data)
taxa_table = as.data.frame(ps@tax_table)
asv_table = t(as.data.frame(ps@otu_table))
study_metadata$SampleID = colnames(asv_table)
someints = sample.int(134,20)
small_study_metadata = study_metadata[someints,]
small_asv_table = asv_table[,someints]
View(small_asv_table)
small_asv_table = as.data.frame(asv_table[,someints])
rownames(small_asv_table)
colnames(small_asv_table)
asvs_with_nonzero_counts = colsums(small_asv_table) != 0
small_asv_table = small_asv_table[asvs_with_nonzero_counts,]
asvs_with_nonzero_counts = colSums(small_asv_table) != 0
asvs_with_nonzero_counts = ( colSums(small_asv_table) != 0 )
asvs_with_nonzero_counts = ( rowSums(small_asv_table) != 0 )
small_asv_table = small_asv_table[asvs_with_nonzero_counts,]
View(small_asv_table)
source('~/hyperphylo/make_small_tables.R')
source('~/hyperphylo/physeq_filter_test.R')
source('~/hyperphylo/make_small_tables.R')
sample_names
source('~/hyperphylo/make_small_tables.R')
asv_table = as.data.frame(t(ps@otu_table))
taxa_table = as.data.frame(ps@tax_table)
study_metadata = as.data.frame(ps@sam_data)
study_metadata$SampleID = colnames(asv_table)
someints = sample.int(134,20)
small_study_metadata = study_metadata[someints,]
small_asv_table = asv_table[, someints]
asvs_with_nonzero_counts = ( rowSums(small_asv_table) != 0 )
asv_table = as.data.frame(t(ps@otu_table))
source('~/hyperphylo/make_small_tables.R')
small_study_metadata = study_metadata[someints,]
age_rounded_numeric = sapply(small_study_metadata$Age_Rounded, as.numeric)
small_study_metadata['Age_Rounded'] = as.factor(age_rounded_numeric)
age_rounded_numeric = sapply(small_study_metadata$Age_Rounded, as.numeric)
small_study_metadata['Age_Rounded'] = as.factor(age_rounded_numeric)
CaseString = ifelse(small_study_metadata$Case == 0, "AMD", "Control")
small_study_metadata$CaseString = CaseString
small_study_metadata$SampleID = colnames(small_asv_table)
sample_names = levels(small_study_metadata$SampleID)
small_study_metadata = small_study_metadata[,sort(colnames(small_study_metadata))]
View(small_study_metadata)
source('~/hyperphylo/make_small_tables.R')
source('~/hyperphylo/physeq_filter_test.R')
source('~/hyperphylo/make_small_tables.R')
source('~/hyperphylo/PhyseqFilter.R')
small_study_metadata$SampleID
ps
source('~/hyperphylo/make_small_tables.R')
source('~/hyperphylo/PhyseqFilter.R')
dim(colnames(asv))
dim(colnames(asv_table))
colnames(asv_table)
length(colnames(asv_table))
dim(asv_table)
source('~/hyperphylo/PhyseqFilter.R')
source('~/hyperphylo/make_small_tables.R')
s = ps@sam_data
dim(s)
save(ps, file="test_phyo.RData")
load('test_phyo.RData')
s = ps@sam_data
dim(s)
study_metadata = as.data.frame(ps@sam_data)
dim(study_metadata)
source('~/hyperphylo/PhyseqFilter.R')
tax_abundance_table = sqldf(row.names=T,
"
select
*
from
taxa_table inner join asv_table
on
taxa_table.row_names == asv_table.row_names
"
)
tax_abundance_table = sqldf(row.names=T,
"
select
*
from
small_taxa_table inner join small_asv_table
on
small_taxa_table.row_names == small_asv_table.row_names
"
)
View(tax_abundance_table)
sqldf("select * from tax_abundance_table where Genus in (Bacteroides)"
)
sqldf("select * from tax_abundance_table where Genus in ('Bacteroides')")
source('~/hyperphylo/PhyseqFilter.R')
psfilter1
psfilter1.getPS()
source('~/hyperphylo/PhyseqFilter.R')
psfilter1$getPS()
source('~/hyperphylo/PhyseqFilter.R')
psfilter1
psfilter1$getPS()
source('~/hyperphylo/PhyseqFilter.R')
psfilter1
source('~/hyperphylo/PhyseqFilter.R')
psfilter1
source('~/hyperphylo/physeq_filter_test.R')
?sqldf
a = data.frame(A=c(1,2,3), B=c('a','b','c'))
rownames(a) = c('aaa','bbb','ccc')
b = data.frame(C=c(10,20,30), D=c('p','q','r'))
rownames(b) = c('ccc','bbb','aaa')
sqldf(row.names=T, "select * from a inner join b on a.row_names = b.row_names")
sqldf(row.names=T, "select * from a full join a b")
sqldf(row.names=T, "select * from a full join b")
sqldf(row.names=T, "select * from a outer join b")
sqldf(row.names=T, "select * from a left outer join b")
sqldf(row.names=T, "select * from a inner join b")
sqldf(row.names=T, "select * from a inner join b where a.row_names == b.row_names")
